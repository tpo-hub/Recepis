{"version":3,"sources":["Recipes.js","App.js","reportWebVitals.js","index.js"],"names":["Recipes","props","Title","Ingredients","map","i","text","Calories","src","img","alt","Key","App","GetRecipes","a","fetch","Submmit","Response","json","data","setRecepes","hits","useState","recipes","Search","setSearch","setSubmmit","useEffect","className","onSubmit","e","preventDefault","type","value","onChange","target","r","recipe","ingredients","label","calories","image","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAuBeA,EApBC,SAACC,GAET,OACI,cAAC,WAAD,UACI,gCACI,6BAAKA,EAAMC,QACX,6BACED,EAAME,YAAYC,KAAI,SAAAC,GAAC,OAAK,6BAAKA,EAAEC,YAGrC,8BAAG,yCAAH,KAAqBL,EAAMM,YAC3B,qBAAKC,IAAKP,EAAMQ,IAAIC,IAAI,OAPlBT,EAAMU,QC0CjBC,MA7Cf,WAEE,IAGcC,EAAU,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,mCAAD,OAAoCC,EAApC,mBAJrB,WAIqB,oBAHpB,uCAEW,cACbC,EADa,gBAEAA,EAASC,OAFT,OAEbC,EAFa,OAGnBC,EAAWD,EAAKE,MAHG,2CAAH,qDAgBxB,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBH,EAAhB,KAEA,EAA8BE,mBAAS,GAAvC,mBAEA,GAFA,UAE4BA,mBAAS,MAArC,mBAAOE,EAAP,KAAeC,EAAf,KAEA,EAA8BH,mBAAS,KAAvC,mBAAON,EAAP,KAAgBU,EAAhB,KAOA,OALAC,oBAAS,sBAAC,sBAAAb,EAAA,sDACRD,IADQ,2CAGR,CAACG,IAGD,sBAAKY,UAAU,MAAf,UACC,uBAAMA,UAAU,cAAcC,SArBP,SAAAC,GAChBA,EAAEC,iBACFL,EAAWF,GACXC,EAAU,MAkBjB,UACE,uBAAOG,UAAU,aAAaI,KAAK,OAAOC,MAAOT,EAAQU,SA1BnC,SAAAJ,GACjBL,EAAUK,EAAEK,OAAOF,UA0BxB,wBAAQL,UAAU,gBAAgBI,KAAK,SAAvC,uBAEAT,EAAQnB,KAAK,SAAAgC,GAAC,OAAK,cAAC,EAAD,CAASjC,YAAaiC,EAAEC,OAAOC,YAAapC,MAAOkC,EAAEC,OAAOE,MAAOhC,SAAU6B,EAAEC,OAAOG,SAAU/B,IAAK2B,EAAEC,OAAOI,MAAO9B,IAAKyB,EAAEC,OAAOE,eChC9IG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cffe6bf8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Fragment } from \"react/cjs/react.production.min\";\r\n\r\nconst Recipes = (props) => \r\n    {\r\n        return(\r\n            <Fragment>\r\n                <div key={props.Key}>\r\n                    <h1>{props.Title}</h1>\r\n                    <ul>\r\n                     {props.Ingredients.map(i => (<li>{i.text}</li>) )}\r\n                       \r\n                    </ul>\r\n                    <p><i>Calories</i>: {props.Calories}</p>\r\n                    <img src={props.img}alt=\"\" />  \r\n                </div>\r\n            </Fragment>\r\n\r\n        )\r\n\r\n        \r\n    }\r\n\r\nexport default Recipes;","import React,{useEffect, useState} from \"react\";\nimport \"./App.css\"\nimport Recipes from \"./Recipes\";\n\nfunction App() {\n\n  const App_Id = \"f3fa8860\";\n  const Api_key = \"aaa22c29f15208a3a6e020bbffed64eb\t\";\n  \n          const GetRecipes = async ()=>{\n          const Response = await fetch(`https://api.edamam.com/search?q=${Submmit}&app_id=${App_Id}&app_key=${Api_key}`)\n          const data = await Response.json();\n          setRecepes(data.hits)\n        }\n    \n        const UpdateSearch = e=> {\n            setSearch(e.target.value)\n          }\n          \n          const GetSearch = e=> {\n            e.preventDefault();\n            setSubmmit(Search);\n            setSearch(\" \")\n        }\n\n  const [recipes, setRecepes] = useState([]);\n\n  const [counter, setCounter] = useState(0);\n\n  const [Search, setSearch] = useState(\" \");\n\n  const [Submmit, setSubmmit] = useState(' ');\n\n  useEffect(async ()=>{\n    GetRecipes();\n    \n  },[Submmit])   \n\n  return (\n    <div className=\"App\">\n     <form className=\"search-form\" onSubmit={GetSearch }>\n       <input className=\"search-bar\" type=\"text\" value={Search} onChange={UpdateSearch} />\n       <button className=\"search-button\" type=\"submit\">Search</button>\n     </form>\n      {recipes.map( r => (<Recipes Ingredients={r.recipe.ingredients} Title={r.recipe.label} Calories={r.recipe.calories} img={r.recipe.image} Key={r.recipe.label} />))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}